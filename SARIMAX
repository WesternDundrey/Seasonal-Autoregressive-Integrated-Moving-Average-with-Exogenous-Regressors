{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"},"kaggle":{"accelerator":"none","dataSources":[],"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nfrom statsmodels.tsa.statespace.sarimax import SARIMAX\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\nimport matplotlib.pyplot as plt\nfrom datetime import datetime, timedelta\n\nclass SARIMAXModel:\n    def __init__(self, order=(1,1,1), seasonal_order=(1,1,1,12)):\n        \"\"\"\n        Initialize SARIMAX model with specified parameters\n        \n        Args:\n            order: (p,d,q) - Non-seasonal parameters\n            seasonal_order: (P,D,Q,s) - Seasonal parameters\n        \"\"\"\n        self.order = order\n        self.seasonal_order = seasonal_order\n        self.model = None\n        self.results = None\n        \n    def fit(self, endog, exog=None):\n        \"\"\"\n        Fit the SARIMAX model\n        \n        Args:\n            endog: Target variable (time series)\n            exog: Exogenous variables (optional)\n        \"\"\"\n        self.model = SARIMAX(\n            endog,\n            exog=exog,\n            order=self.order,\n            seasonal_order=self.seasonal_order,\n            enforce_stationarity=False,\n            enforce_invertibility=False\n        )\n        self.results = self.model.fit()\n        return self.results\n    \n    def predict(self, start=None, end=None, exog=None):\n        \"\"\"\n        Generate predictions\n        \n        Args:\n            start: Start index for predictions\n            end: End index for predictions\n            exog: Exogenous variables for prediction period\n        \"\"\"\n        if self.results is None:\n            raise ValueError(\"Model must be fit before making predictions\")\n        return self.results.predict(start=start, end=end, exog=exog)\n    \n    def forecast(self, steps, exog=None):\n        \"\"\"\n        Generate forecasts beyond the training data\n        \n        Args:\n            steps: Number of steps to forecast\n            exog: Exogenous variables for forecast period\n        \"\"\"\n        if self.results is None:\n            raise ValueError(\"Model must be fit before forecasting\")\n        return self.results.forecast(steps=steps, exog=exog)\n    \n    def evaluate(self, y_true, y_pred):\n        \"\"\"\n        Evaluate model performance\n        \n        Args:\n            y_true: Actual values\n            y_pred: Predicted values\n        \"\"\"\n        metrics = {\n            'RMSE': np.sqrt(mean_squared_error(y_true, y_pred)),\n            'MAE': mean_absolute_error(y_true, y_pred)\n        }\n        return metrics\n    \n    def plot_diagnostics(self):\n        \"\"\"Plot model diagnostic plots\"\"\"\n        if self.results is None:\n            raise ValueError(\"Model must be fit before plotting diagnostics\")\n        self.results.plot_diagnostics()\n        plt.tight_layout()\n        \n    def summary(self):\n        \"\"\"Return model summary\"\"\"\n        if self.results is None:\n            raise ValueError(\"Model must be fit before getting summary\")\n        return self.results.summary()\n\n# Example usage\ndef example_usage():\n    # Generate sample data\n    np.random.seed(42)\n    dates = pd.date_range(start='2020-01-01', periods=100, freq='D')\n    y = np.random.normal(0, 1, 100) + np.sin(np.linspace(0, 10, 100))  # Target variable\n    X = pd.DataFrame({\n        'feature1': np.random.normal(0, 1, 100),\n        'feature2': np.random.normal(0, 1, 100)\n    })  # Exogenous variables\n    \n    # Create and fit model\n    model = SARIMAXModel(order=(1,1,1), seasonal_order=(1,1,1,12))\n    model.fit(y, exog=X)\n    \n    # Make predictions\n    predictions = model.predict(exog=X)\n    \n    # Evaluate model\n    metrics = model.evaluate(y[1:], predictions[1:])  # Skip first value due to differencing\n    print(\"\\nModel Metrics:\")\n    for metric, value in metrics.items():\n        print(f\"{metric}: {value:.4f}\")\n    \n    # Plot diagnostics\n    model.plot_diagnostics()\n    \n    # Generate forecast\n    forecast = model.forecast(steps=10, exog=X.iloc[-10:])\n    print(\"\\nForecast for next 10 steps:\")\n    print(forecast)\n\nif __name__ == \"__main__\":\n    example_usage()","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"outputs":[],"execution_count":null}]}